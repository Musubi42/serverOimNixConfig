# Auto-generated using compose2nix v0.2.2.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."oim-dockge" = {
    image = "louislam/dockge:1";
    environment = {
      "DOCKGE_STACKS_DIR" = "/opt/stacks";
    };
    volumes = [
      "/opt/stacks:/opt/stacks:rw"
      "/opt/stacks/oim-dockge/volumes/data:/app/data:rw"
      "/var/run/docker.sock:/var/run/docker.sock:rw"
    ];
    labels = {
      # "" = "";
      "traefik.enable" =  "true";
      "traefik.http.routers.dockge.entrypoints" = "websecure";
      "traefik.http.routers.dockge.rule" = "Host(`dockge.musubi.dev`)";
      "traefik.http.routers.dockge.tls" = "true";
      "traefik.http.routers.dockge.tls.certresolver" = "letsencryptresolver";
      "traefik.http.services.dockge.loadbalancer.server.port" = "5001";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=dockge"
      "--network=traefik"
    ];
  };
  systemd.services."docker-oim-dockge" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    partOf = [
      "docker-compose-oim-dockge-root.target"
    ];
    wantedBy = [
      "docker-compose-oim-dockge-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-oim-dockge-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
